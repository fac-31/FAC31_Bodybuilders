name: Mutation Pipeline

on:
  pull_request:
    types: [closed]
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

jobs:
  pipeline:
    if: github.event.pull_request.merged == true && github.event.pull_request.head.ref != 'mutation'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "Bodybuilders[bot]"
          git config user.email "bodybuilders[bot]@bodybuilders.com"

      - name: Check if branch exists, if not create it
        run: |
          BRANCH_NAME="mutation"

          echo "Checking if branch '$BRANCH_NAME' exists..."

          if git ls-remote --heads origin "$BRANCH_NAME" | grep "$BRANCH_NAME" >/dev/null; then
            echo "Branch '$BRANCH_NAME' already exists in origin."
            git fetch origin "$BRANCH_NAME"
          else
            echo "Branch '$BRANCH_NAME' does not exist. Creating it..."
            git fetch origin main
            git checkout -b "$BRANCH_NAME" origin/main
            git push origin "$BRANCH_NAME"
            echo "Branch '$BRANCH_NAME' created and pushed."
          fi

      - name: Rebase main into mutation
        run: |
          set -e
          BRANCH_NAME="mutation"
          BASE_BRANCH="main"

          echo "Fetching branches..."
          git fetch origin $BASE_BRANCH
          git fetch origin $BRANCH_NAME || echo "Remote branch $BRANCH_NAME does not exist yet"

          # Ensure local base branch exists
          if ! git show-ref --verify --quiet "refs/heads/$BASE_BRANCH"; then
            git checkout -b "$BASE_BRANCH" "origin/$BASE_BRANCH"
          else
            git checkout "$BASE_BRANCH"
            git reset --hard "origin/$BASE_BRANCH"
          fi

          # Ensure local mutation branch exists
          if git show-ref --verify --quiet "refs/heads/$BRANCH_NAME"; then
            echo "Local branch $BRANCH_NAME exists"
            git checkout "$BRANCH_NAME"
          elif git ls-remote --exit-code --heads origin "$BRANCH_NAME"; then
            echo "Remote branch $BRANCH_NAME exists, creating local tracking branch"
            git checkout -b "$BRANCH_NAME" "origin/$BRANCH_NAME"
          else
            echo "Branch $BRANCH_NAME does not exist at all. Creating from $BASE_BRANCH"
            git checkout -b "$BRANCH_NAME" "origin/$BASE_BRANCH"
            git push origin "$BRANCH_NAME"
          fi

          echo "Rebasing $BRANCH_NAME onto $BASE_BRANCH..."
          git rebase "origin/$BASE_BRANCH" || { echo "Rebase failed"; exit 1; }

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Run scripts/mutator.py
        run: |
          export PYTHONPATH="${PYTHONPATH}:$(pwd)"
          python scripts/mutator.py medium

      - name: Run scripts/fixer.py
        run: |
          export PYTHONPATH="${PYTHONPATH}:$(pwd)"
          python scripts/fixer.py

      - name: Capture mutation context
        id: capture
        run: |
          MUTATION_OUTPUT=$(cat .mutation-context.json)
          echo "mutation_output<<EOF" >> $GITHUB_OUTPUT
          echo "$MUTATION_OUTPUT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Generate PR-friendly summary
        id: summary
        run: |
          TIMESTAMP=$(jq -r '.timestamp' .mutation-context.json)
          MUTATION_ID=$(jq -r '.mutation_id' .mutation-context.json)
          FLAVOR=$(jq -r '.config.flavor' .mutation-context.json)

          # Create Markdown table rows
          FILES_TABLE=$(jq -r '.mutations[] | "| \(.file) | \(.start_line) | \(.deleted_line_count) | \(.added_code // "N/A") |"' .mutation-context.json)

          # Set outputs safely using multiline syntax
          echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT
          echo "mutation_id=$MUTATION_ID" >> $GITHUB_OUTPUT
          echo "flavor=$FLAVOR" >> $GITHUB_OUTPUT

          echo "mutated_files_table<<EOF" >> $GITHUB_OUTPUT
          echo "$FILES_TABLE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Pull Request to main
        id: pr
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          base: main
          branch: mutation
          title: "Bodybuilder PR: Mutation â†’ Main"
          committer: "Bodybuilder[Bot] <bodybuilders@bodybuilders.com>"
          author: "Bodybuilders[Bot] <bodybuilders@bodybuilders.com>"
          body: |
            # ðŸ¤– Automated Mutation Pull Request

            **Mutation Details**

            - **Timestamp:** ${{ steps.capture.outputs.timestamp }}
            - **Mutation ID:** ${{ steps.capture.outputs.mutation_id }}
            - **Flavor:** ${{ steps.capture.outputs.flavor }}

            **Mutated Files**
            | File | Start Line | Deleted Lines | Added Code |
            |------|------------|---------------|------------|
            ${{ steps.capture.outputs.mutated_files_table }}

            **Summary**
            The mutations above were applied automatically by `mutator.py` and reviewed/fixed by `fixer.py`. Please review the PR and merge if everything looks correct.

            **Full JSON Context**
            ```json
            ${{ steps.capture.outputs.mutation_output }}
            ```
          delete-branch: false

      - name: Output PR info
        run: |
          echo "PR number: ${{ steps.pr.outputs.pull-request-number }}"
          echo "PR URL: ${{ steps.pr.outputs.pull-request-url }}"
